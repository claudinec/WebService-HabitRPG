package WebService::HabitRPG;
use v5.010;
use strict;
use warnings;
use autodie;
use Moo;
use WWW::Mechanize; # Probably overkill
use Method::Signatures;
use JSON::Any;

# ABSTRACT: Perl interface to the HabitRPG API

# VERSION: Generated by DZP::OurPkg:Version

=for Pod::Coverage BUILD DEMOLISH

=cut

has 'api_token' => (is => 'ro'); # aka x-api-key
has 'user_id'   => (is => 'ro'); # aka x-api-user
has 'agent'     => (is => 'rw');

use constant URL_BASE => 'http://habitrpg.com/api/v1';

my $json = JSON::Any->new;

sub BUILD {
    my ($self, $args) = @_;

    # Set a default agent if we don't already have one.

    if (not $self->agent) {
        $self->agent(
            WWW::Mechanize->new(
                agent => "Perl/$], WebService::HabitRPG/" . $self->VERSION,
            )
        );
    }

    return;
}

method user()       { return $self->_get_request( '/user'       ); }
method user_tasks() { return $self->_get_request( '/user/tasks' ); }

method get_task($task_id) {
    return $self->_get_request("/user/task/$task_id");
}

method new_task(
    :$type! where qr{ habit | daily | todo | reward }x,
    :$text!,
    :$completed,
    :$value = 0,
    :$note = ''
) {

    # TODO : The API spec doesn't allow the submission of up/down
    # values, but I feel that *should* be allowed, otherwise
    # creating goals isn't full-featured.

    my $payload = $json->encode({
        type      => $type,
        text      => $text,
        completed => $completed,
        value     => $value,
        note      => $note,
    });

    my $req = $self->_request('POST', '/user/task');

    $req->content( $payload );

    return $json->decode( $self->agent->request( $req )->decoded_content );

}

# Convenience methods
method up  ($task) { return $self->updown($task, 'up'  ); }
method down($task) { return $self->updown($task, 'down'); }

# Returns: {"exp":11,"gp":12.416828586491677,"hp":50,"lvl":2,"delta":1}

method updown(
    $task!,
    $direction! where qr{up|down}
) {

    my $url = 'https://habitrpg.com/v1/users/' . $self->user_id . '/tasks/' . $task . '/' . $direction;

    warn "Posting to $url\n";

    my $req = HTTP::Request->new( 'POST', $url);
    $req->header( 'Content-Type' => 'application/json');
    $req->content( $json->encode({ apiToken => $self->api_token }) );

    return $json->decode( $self->agent->request( $req )->decoded_content );
}

method _get_request($url) {
    my $req = $self->_request('GET', $url);

    my $response = $self->agent->request( $req );

    return $json->decode( $response->decoded_content );
}

method _request($type, $url) {

    my $req = HTTP::Request->new( $type, URL_BASE . $url );
    $req->header( 'Content-Type' => 'application/json');
    $req->header( 'x-api-user'   => $self->user_id    );
    $req->header( 'x-api-key'    => $self->api_token  );

    return $req;
}

1;
